const LOG={INFO:"info",DANGER:"danger",WARNING:"warning",SUCCESS:"success"};class OptionsManager{constructor(){this.addColorButton=document.getElementById("addColor"),this.saveButton=document.getElementById("save"),this.lastOpenColorsList=document.getElementById("lastOpenColors"),this.defaultLastOpenColors=document.getElementById("defaultLastOpenColors"),this.refreshSaveButton=document.getElementById("refresh-save"),this.copySave=document.getElementById("copy-save"),this.saveContent=document.getElementById("save-content"),this.importMMDForm=document.getElementById("save-import"),this.importMALForm=document.getElementById("mal-import"),this.exportMALForm=document.getElementById("mal-export"),this.deleteSaveButton=document.getElementById("delete-save"),this.contentNode=document.getElementById("content"),this.lastOpenColorsNodes={},this.importOutput=document.getElementById("malImportStatus"),this.exportOutput=document.getElementById("malExportStatus"),this.importInformations=document.getElementById("importInformations"),this.importSubmitButton=document.getElementById("importSubmitButton"),this.options={},this.myAnimeListMangaList={},this.mangaDexMangaList=[],this.currentLog="import",this.malBusy=!1,this.loggedMyAnimeList=!0,this.HTMLParser=new DOMParser,this.setEvents(),this.start()}async start(){this.options=await loadOptions(),this.restoreOptions()}setEvents(){document.querySelectorAll("[data-color]").forEach(a=>{let b=a.dataset.option;["input","change","cut","paste","keyup"].forEach(function(c){a.addEventListener(c,a=>{document.querySelector("[data-color='"+b+"']").style.backgroundColor=a.target.value})})}),document.querySelectorAll("[data-type='checkbox']").forEach(a=>{let b=a.getElementsByTagName("button");b[0].addEventListener("click",()=>{this.updateCheckbox(a,!0)}),b[1].addEventListener("click",()=>{this.updateCheckbox(a,!1)})}),this.addColorButton.addEventListener("click",()=>{this.addColor()}),this.saveButton.addEventListener("click",()=>{this.saveOptions()}),document.querySelectorAll("[data-default]").forEach(a=>{a.addEventListener("click",()=>{let b=document.querySelector("[data-option='"+a.dataset.default+"']");"type"in b.dataset&&"checkbox"==b.dataset.type?this.updateCheckbox(b,defaultOptions[a.dataset.default]):(b.value=defaultOptions[a.dataset.default],b.dataset.color!==void 0&&(document.querySelector("[data-color='"+a.dataset.default+"']").style.backgroundColor=defaultOptions[a.dataset.default]))})}),this.defaultLastOpenColors.addEventListener("click",()=>{this.restoreDefaultsLastOpenColors()}),this.refreshSaveButton.addEventListener("click",async()=>{this.copySave.classList.add("d-none");let a=await storageGet(null);this.saveContent.value=JSON.stringify(a),this.copySave.classList.remove("d-none")}),this.copySave.addEventListener("click",async()=>{this.copySave.classList.add("d-none"),this.saveContent.select(),document.execCommand("copy"),this.saveContent.value=""}),this.saveContent.addEventListener("click",a=>{a.target.select()}),this.importMMDForm.addEventListener("submit",a=>{a.preventDefault(),this.importMMD()}),this.importMALForm.addEventListener("submit",a=>{a.preventDefault(),this.importMAL()}),this.exportMALForm.addEventListener("submit",a=>{a.preventDefault(),this.exportMAL()}),this.deleteSaveButton.addEventListener("click",()=>{this.deleteSave()})}async restoreOptions(){let a=this.options.lastOpenColors;this.deleteLastOpenColors(),a.forEach(a=>{this.addColor(a)}),document.querySelectorAll("[data-option]").forEach(a=>{a.dataset.type!==void 0&&"checkbox"==a.dataset.type?this.updateCheckbox(a,this.options[a.dataset.option]):(a.value=this.options[a.dataset.option],a.dataset.color!==void 0&&(document.querySelector("[data-color='"+a.dataset.option+"']").style.backgroundColor=a.value))})}addColor(a=""){let b=uniqueGUID();for(;this.lastOpenColorsNodes[b]!==void 0;)b=uniqueGUID();let c=document.createElement("div");c.className="col px-0 pb-2 my-auto input-group";let d=document.createElement("div");d.className="input-group-prepend";let e=document.createElement("i");e.className="fas fa-trash";let f=document.createElement("a");f.className="btn btn-danger input-prepend",f.appendChild(e),f.appendChild(document.createTextNode(" Remove")),f.addEventListener("click",()=>{this.removeColor(b)}),d.appendChild(f),c.appendChild(d);let g=document.createElement("div");g.className="input-group-append";let h=document.createElement("span");h.className="input-group-text",h.style.backgroundColor=a,g.appendChild(h);let i=document.createElement("input");["input","change","cut","paste","keyup"].forEach(function(a){i.addEventListener(a,a=>{h.style.backgroundColor=a.target.value})}),i.type="text",i.className="form-control",i.value=a,this.lastOpenColorsNodes[b]={parent:c,input:i},c.appendChild(i),c.appendChild(g),this.lastOpenColorsList.insertBefore(c,this.lastOpenColorsList.lastElementChild)}removeColor(a){1<Object.keys(this.lastOpenColorsNodes).length&&(this.lastOpenColorsList.removeChild(this.lastOpenColorsNodes[a].parent),delete this.lastOpenColorsNodes[a])}deleteLastOpenColors(){for(;this.lastOpenColorsList.firstChild&&!("addColorRow"==this.lastOpenColorsList.firstChild.id);)this.lastOpenColorsList.removeChild(this.lastOpenColorsList.firstChild);this.lastOpenColorsNodes={}}restoreDefaultsLastOpenColors(){this.deleteLastOpenColors(),defaultOptions.lastOpenColors.forEach(a=>{this.addColor(a)})}updateCheckbox(a,b){a.dataset.value=b;let c=a.firstElementChild.firstElementChild,d=a.lastElementChild.lastElementChild;b?(c.classList.add("btn-success"),c.classList.remove("btn-secondary"),d.classList.add("btn-secondary"),d.classList.remove("btn-danger")):(c.classList.add("btn-secondary"),c.classList.remove("btn-success"),d.classList.add("btn-danger"),d.classList.remove("btn-secondary"))}flashBackground(a){this.contentNode.classList.add(a?"bg-success":"bg-fail"),setTimeout(()=>{this.contentNode.classList.remove(a?"bg-success":"bg-fail")},500)}async saveOptions(){try{this.options.lastOpenColors=[],Object.keys(this.lastOpenColorsNodes).forEach(a=>{this.options.lastOpenColors.push(this.lastOpenColorsNodes[a].input.value)}),document.querySelectorAll("[data-option]").forEach(a=>{this.options[a.dataset.option]="type"in a.dataset&&"checkbox"==a.dataset.type?"true"==a.dataset.value:a.value}),await storageSet("options",this.options),console.log("Saved"),this.flashBackground(!0)}catch(a){console.error(a),this.flashBackground(!1)}}async deleteSave(){await browser.storage.local.clear();try{await storageSet("options",defaultOptions),this.options=JSON.parse(JSON.stringify(defaultOptions)),this.flashBackground(!0),this.restoreOptions()}catch(a){console.error(a),this.flashBackground(!1)}}logAndScroll(a,b){let c=document.createElement("li");c.className="list-group-item list-group-item-"+a,c.textContent=b,this.logOutput.appendChild(c),this.logOutput.scrollTop=this.logOutput.scrollHeight}async importMMD(){try{this.importSubmitButton.disabled=!0;let a=JSON.parse(this.importMMDForm.save.value);if(isEmpty(a)||void 0===a.options)return this.importInformations.textContent="Invalid save.",this.importSubmitButton.disabled=!1,void this.flashBackground(!1);this.importInformations.textContent="Entries in the save: "+(Object.keys(a).length-1);await storageSet(null,a),this.options=await loadOptions(),await this.restoreOptions(),this.flashBackground(!0),this.importSubmitButton.disabled=!1,this.importMMDForm.save.value=""}catch(a){this.importSubmitButton.disabled=!1,this.flashBackground(!1),console.error(a)}}async importMAL(){if(!this.malBusy){let a=this.importMALForm.username.value;this.importMALForm.disabled=!0,""==a?(this.flashBackground(!1),console.error("Empty MAL username")):(this.myAnimeListMangaList={},this.mangaDexMangaList=[],this.malBusy=!0,this.logOutput=this.importOutput,this.logOutput.style.display="block",clearDomNode(this.logOutput),this.logAndScroll(LOG.INFO,"Starting... don't close the options page."),await this.listMyAnimeList(a,0,!0),0==Object.keys(this.myAnimeListMangaList).length?(this.flashBackground(!1),this.logAndScroll(LOG.DANGER,"Empty MAL manga list, aborting.")):(await this.listMyAnimeList(a,Object.keys(this.myAnimeListMangaList).length),await this.listMangaDex(),await this.updateLocalFromMDMAL(),this.flashBackground(!0)),this.malBusy=!1)}}async listMyAnimeList(a,b=0,c=!1){if(0<b&&300>b)return void this.logAndScroll(LOG.SUCCESS,"Done fetching MyAnimeList manga.");this.logAndScroll(LOG.INFO,"Fetching MyAnimeList manga from "+b+" to "+(b+300));try{let d=await fetch("https://myanimelist.net/mangalist/"+a+"/load.json?offset="+b+"&status=7",{method:"GET",redirect:"follow",credentials:"include"}),e=await d.json();if(e.hasOwnProperty("errors"))this.logAndScroll(LOG.DANGER,e.errors[0].message);else{for(let a of e)this.myAnimeListMangaList[parseInt(a.manga_id)]=parseInt(a.num_read_chapters);c||(300==e.length?await this.listMyAnimeList(a,b+300):this.logAndScroll(LOG.SUCCESS,"Done fetching MyAnimeList manga."))}}catch(a){this.flashBackground(!1),console.error(a)}}async listMangaDex(a=1,b=1,c=0){var d=Math.ceil;this.logAndScroll(LOG.INFO,"Fetching MangaDex follow page manga "+a+(1<b?" of "+b:""));try{let e=await fetch("https://mangadex.org/follows/manga/"+c+"/0/"+a+"/",{method:"GET",redirect:"follow",credentials:"include"}),f=await e.text(),g=this.HTMLParser.parseFromString(f,"text/html"),h=g.getElementsByClassName("manga_title");for(let a=0;a<h.length;a++)this.mangaDexMangaList.push(parseInt(/\/title\/(\d+)\//.exec(h[a].href)[1]));if(1==a)try{let a=/Showing\s\d+\sto\s\d+\sof\s(\d+)\stitles/.exec(document.querySelector(".mt-3.text-center").textContent);null!==a&&(b=d(a[1]/100))}catch(a){b=1}a<b?await this.listMangaDex(a+1,b):this.logAndScroll(LOG.SUCCESS,"Done fetching MangaDex follow manga.")}catch(a){this.flashBackground(!1),console.error(a)}}async updateLocalFromMDMAL(a=0){var b=Math.max;this.logAndScroll(LOG.INFO,"Updating "+(a+1)+"/"+this.mangaDexMangaList.length),await new Promise(a=>{setTimeout(()=>{a()},500)});try{let c=await fetch("https://mangadex.org/title/"+this.mangaDexMangaList[a],{method:"GET",cache:"no-cache"}),d=await c.text(),e=this.HTMLParser.parseFromString(d,"text/html"),f={mangaDexId:this.mangaDexMangaList[a],myAnimeListId:0,lastMangaDexChapter:0,currentChapter:{volume:0,chapter:0},chapters:[]},g=e.querySelector("h6[class='card-header']").textContent.trim(),h=e.querySelector("img[src='/images/misc/mal.png'");if(null===h?f.myAnimeListId=0:(h=h.nextElementSibling,f.myAnimeListId=parseInt(/https:\/\/myanimelist\.net\/manga\/(\d+)/.exec(h.href)[1])),0==f.myAnimeListId){if(this.logAndScroll(LOG.WARNING,"> "+g+" set to Chapter 0 (No MyAnimeList entry)"),await updateLocalStorage(f,this.options),a++,a<this.mangaDexMangaList.length)return this.updateLocalFromMDMAL(a);this.logAndScroll(LOG.SUCCESS,"Done.")}else{if(f.myAnimeListId in this.myAnimeListMangaList&&(f.currentChapter.chapter=this.myAnimeListMangaList[f.myAnimeListId],this.options.saveAllOpened)){let a=b(f.currentChapter.chapter-this.options.maxChapterSaved,0);for(let b=f.currentChapter.chapter;b>a;b--)f.chapters.push(b)}if(this.logAndScroll(LOG.SUCCESS,"> "+g+" set to Chapter "+f.currentChapter.chapter),await updateLocalStorage(f,this.options),a++,a<this.mangaDexMangaList.length)return this.updateLocalFromMDMAL(a);this.logAndScroll(LOG.SUCCESS,"Done.")}}catch(b){this.flashBackground(!1),this.logAndScroll(LOG.DANGER,"Updating "+(a+1)+" Failed"),console.error(b),a++,a<this.mangaDexMangaList.length?await this.updateLocalFromMDMAL(a):this.logAndScroll(LOG.SUCCESS,"Done.")}}async exportMAL(){var a=Math.max;if(!this.malBusy){this.malBusy=!0,this.logOutput=this.exportOutput,this.logOutput.style.display="block",clearDomNode(this.logOutput),this.logAndScroll(LOG.INFO,"Starting... don't close the options page.");for(let b=1;6>=b;b++){await new Promise(a=>{setTimeout(()=>{a()},500)}),this.logAndScroll(LOG.INFO,"Updating manga with the status "+b),this.mangaDexMangaList=[],await this.listMangaDex(1,1,b);let c=this.mangaDexMangaList.length;if(0!=c){for(let d=0;d<c;d++){await new Promise(a=>{setTimeout(()=>{a()},500)}),this.logAndScroll(LOG.INFO,"Updating #"+this.mangaDexMangaList[d]);let c=await storageGet(this.mangaDexMangaList[d]),e=!1;if(null==c){e=!0,this.logAndScroll(LOG.INFO,"Trying to find a MyAnimeList id for #"+this.mangaDexMangaList[d]);let a=await fetch("https://mangadex.org/title/"+this.mangaDexMangaList[d],{method:"GET",cache:"no-cache"}),b=await a.text(),f=this.HTMLParser.parseFromString(b,"text/html");c={mal:0,last:0,chapters:[]};let g=f.querySelector("img[src='/images/misc/mal.png'");null!==g&&(g=g.nextElementSibling,c.mal=parseInt(/https:\/\/myanimelist\.net\/manga\/(\d+)/.exec(g.href)[1]))}if(0==c.mal){this.logAndScroll(LOG.WARNING,"No MyAnimeList id, skip.");continue}let f={};if(f.myAnimeListId=c.mal,await this.fetchMyAnimeList(f,c.mal),!this.loggedMyAnimeList)return void this.logAndScroll(LOG.ERROR,"Not logged on MyAnimeList, aborting.");if(f.is_approved?f.in_list?c.last>f.lastMyAnimeListChapter?(await this.updateMyAnimeList(f,b),this.logAndScroll(LOG.INFO,"> MyAnimeList #"+c.mal+" updated with chapter "+c.last),f.lastMangaDexChapter=c.last):(this.logAndScroll(LOG.INFO,"> MyAnimeList #"+c.mal+" NOT updated since it is up to date."),f.lastMangaDexChapter=f.lastMyAnimeListChapter):(f.currentChapter={chapter:c.last,volume:0},await this.updateMyAnimeList(f,b),this.logAndScroll(LOG.INFO,"> MyAnimeList #"+c.mal+" added with chapter "+c.last)):this.logAndScroll(LOG.INFO,"The manga is still pending approval on MyAnimelist and can't be updated, skip."),e){if(f.mangaDexId=this.mangaDexMangaList[d],f.currentChapter={chapter:f.lastMangaDexChapter,volume:0},f.chapters=[],this.options.saveAllOpened){let b=a(f.currentChapter.chapter-this.options.maxChapterSaved,0);for(let a=f.currentChapter.chapter;a>b;a--)f.chapters.push(a)}await updateLocalStorage(f,this.options)}}this.logAndScroll(LOG.SUCCESS,"Status "+b+" done.")}}this.flashBackground(!0),this.logAndScroll(LOG.SUCCESS,"Done."),this.malBusy=!1}}async fetchMyAnimeList(a){let b=await fetch("https://myanimelist.net/ownlist/manga/"+a.myAnimeListId+"/edit?hideLayout",{method:"GET",redirect:"follow",cache:"no-cache",credentials:"include"}),c=await b.text();-1<b.url.indexOf("login.php")?this.loggedMyAnimeList=!1:(this.csrf=/'csrf_token'\scontent='(.{40})'/.exec(c)[1],processMyAnimeListResponse(a,c))}async updateMyAnimeList(a,b){4==b?b=6:5==b?b=4:6==b&&(b=1,a.is_rereading=!0);let{requestURL:c,body:d}=buildMyAnimeListBody(!0,a,this.csrf,b);try{await fetch(c,{method:"POST",body:d,redirect:"follow",credentials:"include",headers:{"Content-Type":"application/x-www-form-urlencoded",accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"}})}catch(a){this.logAndScroll(LOG.ERROR,"Error updating the manga. error: "+a)}}}document.addEventListener("DOMContentLoaded",async()=>{new OptionsManager});